以下の翻訳は元の権利者に無断で翻訳したものであり，権利者からの要請があった場合
予告無しに削除されることがあります．

--- 以下訳

  Order for Construction          Standard Sand of Pennsylvania Co.
  開発の依頼                      ペンシルバニア スタンダードサンド社

  Client: Cult of the Bound Variable
  クライアント:変数束縛の崇拝者
  Object: UM-32 "Universal Machine"
  作るもの:UM-32 "ユニバーサルマシン"
  -----------------------------------------------------------------
                                                      21 July 19106
                                                     19106年7月21日

  Physical Specifications.
　構造の仕様．
  ------------------------

  The machine shall consist of the following components:
  このマシンは以下のコンポーネントから構成されます:

    * An infinite supply of sandstone platters, with room on each
      for thirty-two small marks, which we call "bits."
    * ビットと呼ばれる32個の小さな印のある，小さな砂岩で出来た複数のプラッタ．

                           least meaningful bit(最下のビット)
                                              |
                                              v
              .--------------------------------.
              |VUTSRQPONMLKJIHGFEDCBA9876543210|
              `--------------------------------'
               ^
               |
               most meaningful bit(最上のビット）

              Figure 0. Platters(図0. プラッタ）
      
      Each bit may be the 0 bit or the 1 bit. Using the system of
      "unsigned 32-bit numbers" (see patent #4,294,967,295) the
      markings on these platters may also denote numbers.
      それぞれのビットは0か1のビットです．それぞれのプラッタは
      "unsigned 32-bitの数" (特許番号4,294,967,295）の数字
      として解釈されます．

    * Eight distinct general-purpose registers, capable of holding one
      platter each.
    * それぞれ1つのプラッタで構成される，8つの独立した汎用レジスタ．

    * A collection of arrays of platters, each referenced by a distinct
      32-bit identifier. One distinguished array is referenced by 0
      and stores the "program." This array will be referred to as the
      '0' array.
    * 複数のプラッタから構成される配列の集合．それぞれの配列は異なる
      32ビットのIDで識別されます．ID=0の配列は特別で"program"が格納されます．

    * A 1x1 character resolution console capable of displaying glyphs
      from the "ASCII character set" (see patent #127) and performing
      input and output of "unsigned 8-bit characters" (see patent
      #255).
    * 1x1の解像度の文字コンソール．これは"ASCII character set"(特許番号127)
      を表示することができ，"unsigned 8-bitの文字"(特許番号255)
      の入出力が可能です．
  

  Behavior.
  動作の仕様．
  ---------

  The machine shall be initialized with a '0' array whose contents
  shall be read from a "program" scroll. All registers shall be
  initialized with platters of value '0'. The execution finger shall
  point to the first platter of the '0' array, which has offset zero.
  このマシンの配列'0'は"program"から読み込まれた値によって初期化されます．
  全てのレジスタは値'0'のプラッタで初期化され，実行指は配列'0'の先頭の
  プラッタを指します．

  When reading programs from legacy "unsigned 8-bit character"
  scrolls, a series of four bytes A,B,C,D should be interpreted with
  'A' as the most magnificent byte, and 'D' as the most shoddy, with
  'B' and 'C' considered lovely and mediocre respectively.
  プログラムのデータはビックエンディアンで与えられます．
  (注:intelマシンを使っている人は要注意ってこと)

  Once initialized, the machine begins its Spin Cycle. In each cycle
  of the Universal Machine, an Operator shall be retrieved from the
  platter that is indicated by the execution finger. The sections
  below describe the operators that may obtain. Before this operator
  is discharged, the execution finger shall be advanced to the next
  platter, if any.
　初期化が終わるとマシンはサイクルに入ります．
  ユニバーサルマシンのそれぞれのサイクルでは実行指が指している
  プラッタから命令を受け取ります．次のセクションではオペレータについて
  記述します．受け取った命令を実行し終えると，実行指は特に指定がなければ
  次のプラッタに移ります．

  Operators.
  命令の仕様．
  ----------

  The Universal Machine may produce 14 Operators. The number of the
  operator is described by the most meaningful four bits of the
  instruction platter.
  ユニバーサルマシンには14の命令があります．命令の種類は命令プラッタの
  上位4ビットで与えられます．

              .--------------------------------.
              |VUTSRQPONMLKJIHGFEDCBA9876543210|
              `--------------------------------'
               ^^^^
               |
               operator number(オペレータの種類）

              Figure 1. Operator Description (オペレータの記述)


  Standard Operators.
  標準的な命令．
  -------------------

  Each Standard Operator performs an errand using three registers,
  called A, B, and C. Each register is described by a three bit
  segment of the instruction platter. The register C is described by
  the three least meaningful bits, the register B by the three next
  more meaningful than those, and the register A by the three next
  more meaningful than those.
  それぞれの標準的な命令は3つのレジスタ(A, B, C)を使います．それぞれの
  レジスタは命令プラッタの3つの領域で与えられます．レジスタCは最も下位の
  3ビットで与えられ，レジスタBが次の上位3ビット，レジスタAはレジスタBの
  次の上位3ビットで与えられます．

                                      A     C
                                      |     |
                                      vvv   vvv                    
              .--------------------------------.
              |VUTSRQPONMLKJIHGFEDCBA9876543210|
              `--------------------------------'
               ^^^^                      ^^^
               |                         |
               operator number           B

              Figure 2. Standard Operators(標準的なオペレータ)


  A description of each basic Operator follows.
  それぞれの基本的な命令について以下に記述します．

  Operator #0. Conditional Move.
  命令 0. 条件付き代入

                  The register A receives the value in register B,
                  unless the register C contains 0.
                  レジスタCの値が0なら，レジスタAにレジスタBの値を
                  代入します．

           #1. Array Index.
  命令 1. 配列の読み込み

                  The register A receives the value stored at offset
                  in register C in the array identified by B.
                  IDがレジスタBの値である配列(配列-B)のC番目の要素を
                  レジスタAに代入します．

           #2. Array Amendment.
  命令 2. 配列への書き込み
                  The array identified by A is amended at the offset
                  in register B to store the value in register C.
                  配列-AのB番目の要素にレジスタCの値を代入します．

           #3. Addition.
  命令 3. 加算

                  The register A receives the value in register B plus 
                  the value in register C, modulo 2^32.
                  レジスタBとレジスタCの加算(mod 2^32)の結果をレジスタAに代入します．

           #4. Multiplication.
  命令 4. 乗算

                  The register A receives the value in register B times
                  the value in register C, modulo 2^32.
                  レジスタBとレジスタCの乗算(mod 2^32)の結果をレジスタAに代入します．

           #5. Division.
  命令 5. 除算
                  The register A receives the value in register B
                  divided by the value in register C, if any, where
                  each quantity is treated treated as an unsigned 32
                  bit number.
                  レジスタBとレジスタCの除算の結果をレジスタAに代入します．
                  ただし，それぞれの値は32ビットの符号無し整数として扱います．

           #6. Not-And.
  命令 6.  Not-And．

                  Each bit in the register A receives the 1 bit if
                  either register B or register C has a 0 bit in that
                  position.  Otherwise the bit in register A receives
                  the 0 bit.
                  レジスタAにレジスタBとレジスタCのNANDの結果を代入します．

  Other Operators.
  その他の命令．
  ----------------

  The following instructions ignore some or all of the A, B and C
  registers.
  以下の命令はレジスタA,B,Cの一部だけを使うか，全くレジスタを使わない命令です．

           #7. Halt.
  命令 7. 停止

                  The universal machine stops computation.
                  ユニバーサルマシンを終了させます．

           #8. Allocation.
  命令 8. 配列の割り当て

                  A new array is created with a capacity of platters
                  commensurate to the value in the register C. This
                  new array is initialized entirely with platters
                  holding the value 0. A bit pattern not consisting of
                  exclusively the 0 bit, and that identifies no other
                  active allocated array, is placed in the B register.
                  レジスタCで与えられた数のプラッタを含む配列を作成します．
                  この配列の全てのプラッタは値0で初期化されます．
                  また，この配列に他の配列と重複しないIDを与え，そのIDを
                  レジスタBに代入します．
                  

           #9. Abandonment.
  命令 9. 配列の破棄

                  The array identified by the register C is abandoned.
                  Future allocations may then reuse that identifier.
                  配列Cを破棄します．
                  一度破棄した配列のIDは次回以降の割り当てに使ってもかまいません．

          #10. Output.
  命令 10. 出力

                  The value in the register C is displayed on the console
                  immediately. Only values between and including 0 and 255
                  are allowed.
                  レジスタCの値をコンソールに表示します．
                  値は0〜255のみ許されます．

          #11. Input.
  命令 11. 入力

                  The universal machine waits for input on the console.
                  When input arrives, the register C is loaded with the
                  input, which must be between and including 0 and 255.
                  If the end of input has been signaled, then the 
                  register C is endowed with a uniform value pattern
                  where every place is pregnant with the 1 bit.
                  ユニバーサルマシンは入力を待ち受けます．入力がきたら
                  その値をレジスタCに代入します．これは必ず0〜255の値
                  である必要があります．入力の終わりがきたら，レジスタCに
                  全てのビットが1の値を代入します．

          #12. Load Program.
  命令 12. プログラムの読み込み

                  The array identified by the B register is duplicated
                  and the duplicate shall replace the '0' array,
                  regardless of size. The execution finger is placed
                  to indicate the platter of this array that is
                  described by the offset given in C, where the value
                  0 denotes the first platter, 1 the second, et
                  cetera.
                  配列-Bの中身をサイズに関係なく配列0にコピーし，
                  実行指をレジスタCで指定されたオフセットへ移動します．
                  オフセット0が配列の先頭を表し，オフセット1が2番目の
                  プラッタをあらわします．

                  The '0' array shall be the most sublime choice for
                  loading, and shall be handled with the utmost
                  velocity.
                  配列0は特別なものなので，なるべく高速に扱えるように
                  しておくべきです．
                  

  Special Operators.
  特殊な命令．
  ------------------

  One special operator does not describe registers in the same way.
  Instead the three bits immediately less significant than the four
  instruction indicator bits describe a single register A. The
  remainder twenty five bits indicate a value, which is loaded
  forthwith into the register A.
  この特殊な命令は，他の命令と同じようにレジスタを指定されません．
  その代わり，命令の種類を記述している4ビットの下位側の3ビットを使って
  レジスタAを指定されます．のこりの25ビットは値を表していて，その値を
  レジスタAへ代入します．

                   A  
                   |  
                   vvv
              .--------------------------------.
              |VUTSRQPONMLKJIHGFEDCBA9876543210|
              `--------------------------------'
               ^^^^   ^^^^^^^^^^^^^^^^^^^^^^^^^
               |      |
               |      value(値)
               |
               operator number(命令の種類)

               Figure 3. Special Operators

          #13. Orthography.
  命令 13. 正書法

                  The value indicated is loaded into the register A
                  forthwith.
                  記述された値をレジスタAに読み込みます．

  Cost-Cutting Measures.
  経費削減のために(手を抜いていい所）．
  ----------------------

  As per our meeting on 13 Febtober 19106, certain "impossible
  behaviors" may be unimplemented in the furnished device. An
  exhaustive list of these Exceptions is given below. Our contractual
  agreement dictates that the machine may Fail under no other
  circumstances.
  19106年2月13日に行ったミーティングで，明らかに"おかしな挙動"があった場合
  与えられた仕様ではうまく動かないと思われました．
  そのような例外的な状況の一覧を以下にあげておきます．
  契約上の同意によって，このような状態ではマシンが正常に動作しなくても
  よいことにします．

  If at the beginning of a cycle, the execution finger does not indicate
  a platter that describes a valid instruction, then the machine may Fail.
  もし処理の初めに実行指が無効な命令を指していた場合，マシンは失敗するでしょう．

  If the program decides to index or amend an array that is not
  active, because it has not been allocated or it has been abandoned,
  or if the offset supplied for the access lies outside the array's
  capacity, then the machine may Fail.
  もしプログラムが，存在しない配列，破棄済みの配列，配列の範囲外のオフセット
  を利用した時，マシンは失敗するでしょう．

  If the program decides to abandon the '0' array, or to abandon an array
  that is not active, then the machine may Fail.
  プログラムが配列0や存在しない配列を破棄しようとした場合，マシンは失敗するでしょう
  
  If the program sets out to divide by a value of 0, then the machine
  may Fail.
  プログラムが0で除算しようとすると，マシンは失敗するでしょう．

  If the program decides to load a program from an array that is not
  active, then the machine may Fail.
  プログラムが存在しない配列からプログラムを読み込もうとしたら，マシンは失敗する
  でしょう．

  If the program decides to Output a value that is larger than 255, the
  machine may Fail.
  プログラムが255より大きい値を表示しようとすると，マシンは失敗するでしょう．

  If at the beginning of a machine cycle the execution finger aims
  outside the capacity of the 0 array, the machine may Fail.
  実行指が配列0の範囲外を指していたら，マシンは失敗するでしょう．
